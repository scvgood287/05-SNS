name: CI/CD

# main branch 에 push 될 때 동작시키겠단 뜻이다.
# 참고로 그냥 push 뿐만 아니라 merge 도 push event 를 발생하니
# push 나 merge 가 발생하면 동작한다.
on:
  push:
    branches: [main]

# 사용할 환경 변수를 미리 지정한다.
env:
  DOCKER_IMAGE: ghcr.io/${{ github.actor }}/trading
  VERSION: ${{ github.sha }}
  NAME: nestjs_cicd
  MONGO_DB_USERNAME: ${{ secrets.MONGO_DB_USERNAME }}
  MONGO_DB_PASSWORD: ${{ secrets.MONGO_DB_PASSWORD }}
  MONGO_DB_URL: ${{ secrets.MONGO_DB_URL }}
  JWT_ACCESS_TOKEN_SECRET_KEY: ${{ secrets.JWT_ACCESS_TOKEN_SECRET_KEY }}
  JWT_ACCESS_TOKEN_EXPIRESIN: ${{ secrets.JWT_ACCESS_TOKEN_EXPIRESIN }}
  JWT_REFRESH_TOKEN_SECRET_KEY: ${{ secrets.JWT_REFRESH_TOKEN_SECRET_KEY }}
  JWT_REFRESH_TOKEN_EXPIRESIN: ${{ secrets.JWT_REFRESH_TOKEN_EXPIRESIN }}
  SALT_ROUNDS: ${{ secrets.SALT_ROUNDS }}

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      # 소스 코드를 컨테이너 안으로 Checkout
      - name: Checkout source code
        uses: actions/checkout@v3
        with:
          path: ./jiyu/app
      # 가상의 컨테이너 안에 Docker 가 돌아갈 수 있는 환경 설치
      - name: Set up docker buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
      - name: Cache docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ env.VERSION }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      # Github Secrets 에 설정해둔 GHCR_TOKEN 으로 GHCR(GitHub Container Registry) 로그인
      - name: Login to ghcr
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}
      # GHCR 에 Docker Image 를 빌드 한 후 Push
      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v3
        with:
          # 여기서 steps.buildx 는 두 번째 단계에서 id 를 buildx 로 설정해서 불러온 것이다.
          builder: ${{ steps.buildx.outputs.name }}
          push: true
          tags: ${{ env.DOCKER_IMAGE }}:latest
          file: ./jiyu/Dockerfile

  deploy:
    needs: build
    name: Deploy
    runs-on: [self-hosted, label-nestjs]
    steps:
      # GHCR 에 로그인
      - name: Login to ghcr
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}
      # 실행 중인 Docker Container 중지, 이전 버전 Container 와 Image 삭제, 새로운 Image 로 Container 실행.
      - name: Docker run
        # 외부에서 8080 포트로 요청이 들어오면 내부의 5000 포트로 요청을 넘겨준다.
        run: |
          docker stop ${{ env.NAME }} && docker rm ${{ env.NAME }} && docker rmi ${{ env.DOCKER_IMAGE }}:latest
          docker run -e MONGO_DB_USERNAME=${{ env.MONGO_DB_USERNAME }} -e MONGO_DB_PASSWORD=${{ env.MONGO_DB_PASSWORD }} -e MONGO_DB_URL=${{ env.MONGO_DB_URL }} -e JWT_ACCESS_TOKEN_SECRET_KEY=${{ env.JWT_ACCESS_TOKEN_SECRET_KEY }} -e JWT_ACCESS_TOKEN_EXPIRESIN=${{ env.JWT_ACCESS_TOKEN_EXPIRESIN }} -e JWT_REFRESH_TOKEN_SECRET_KEY${{ env.JWT_REFRESH_TOKEN_SECRET_KEY }} -e JWT_REFRESH_TOKEN_EXPIRESIN=${{ env.JWT_REFRESH_TOKEN_EXPIRESIN }} -e SALT_ROUNDS=${{ env.SALT_ROUNDS }} -d -p 80:80 --name nestjs_cicd --restart always ${{ env.DOCKER_IMAGE }}:latest
